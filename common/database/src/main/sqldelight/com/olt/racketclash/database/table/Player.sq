import kotlin.Int;

CREATE TABLE IF NOT EXISTS playerTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    birthYear INTEGER AS Int NOT NULL,
    club TEXT NOT NULL
);

filteredAndOrderedPlayer:
WITH filteredAndOrdered AS (
    SELECT
        playerTable.*,
        COUNT(DISTINCT gameStatistics.tournamentId) AS numberOfTournaments,
        0 AS goldMedals,
        0 AS silverMedals,
        0 AS bronzeMedals,
        COUNT(gameStatistics.id) AS gamesPlayed,
        (SELECT COUNT(DISTINCT schedule.id) FROM schedule WHERE
            playerIdLeftOne = playerTable.id OR playerIdLeftTwo = playerTable.id OR
            playerIdRightOne = playerTable.id OR playerIdRightTwo = playerTable.id
        ) AS gamesScheduled
    FROM
        playerTable
    LEFT JOIN
        gameStatistics
    ON
        gameStatistics.playerIdLeftOne = playerTable.id OR
        gameStatistics.playerIdLeftTwo = playerTable.id OR
        gameStatistics.playerIdRightOne = playerTable.id OR
        gameStatistics.playerIdRightTwo = playerTable.id
    WHERE
        name LIKE '%' || :nameFilter || '%' AND
        club LIKE '%' || :clubFilter || '%' AND
        CASE
            WHEN :birthYearFilter IS NULL THEN TRUE
            ELSE birthYear = :birthYearFilter
        END AND
        CASE
            WHEN :hasMedalsFilter IS NULL THEN TRUE
            WHEN :hasMedalsFilter = FALSE THEN goldMedals = 0 AND silverMedals = 0 AND bronzeMedals = 0
            ELSE goldMedals > 0 OR silverMedals > 0 OR bronzeMedals > 0
        END
    GROUP BY
        playerTable.id
)
SELECT
    *
FROM
    filteredAndOrdered
ORDER BY
    CASE :sorting
        WHEN 'nameAsc' THEN name
        WHEN 'birthYearAsc' THEN birthYear
        WHEN 'clubAsc' THEN club
        WHEN 'tournamentsAsc' THEN numberOfTournaments
        WHEN 'medalsAsc' THEN goldMedals
        WHEN 'singlesAsc' THEN name
        WHEN 'doublesAsc' THEN name
    END ASC,
    CASE :sorting
        WHEN 'medalsAsc' THEN silverMedals
        WHEN 'singlesAsc' THEN name
        WHEN 'doublesAsc' THEN name
    END ASC,
    CASE :sorting
        WHEN 'medalsAsc' THEN bronzeMedals
        WHEN 'singlesAsc' THEN name
        WHEN 'doublesAsc' THEN name
    END ASC,
    CASE :sorting
        WHEN 'nameDesc' THEN name
        WHEN 'birthYearDesc' THEN birthYear
        WHEN 'clubDesc' THEN club
        WHEN 'tournamentsDesc' THEN numberOfTournaments
        WHEN 'medalsAsc' THEN goldMedals
        WHEN 'singlesDesc' THEN name
        WHEN 'doublesDesc' THEN name
    END DESC,
    CASE :sorting
        WHEN 'medalsAsc' THEN silverMedals
        WHEN 'singlesDesc' THEN name
        WHEN 'doublesDesc' THEN name
    END DESC,
    CASE :sorting
        WHEN 'medalsAsc' THEN bronzeMedals
        WHEN 'singlesDesc' THEN name
        WHEN 'doublesDesc' THEN name
    END DESC
LIMIT :limit OFFSET :offset;

selectFilteredAndOrderedSize:
SELECT
    COUNT(*) AS size,
    0 AS goldMedals,
    0 AS silverMedals,
    0 AS bronzeMedals
FROM
    playerTable
WHERE
    name LIKE '%' || :nameFilter || '%' AND
    ifnull(club, '') LIKE '%' || :clubFilter || '%' AND
    CASE
        WHEN :birthYearFilter IS NULL THEN TRUE
        ELSE birthYear = :birthYearFilter
    END AND
    CASE
        WHEN :hasMedalsFilter IS NULL THEN TRUE
        WHEN :hasMedalsFilter = FALSE THEN goldMedals = 0 AND silverMedals = 0 AND bronzeMedals = 0
        ELSE goldMedals > 0 OR silverMedals > 0 OR bronzeMedals > 0
    END;

player:
SELECT
    playerTable.*,
    COUNT(DISTINCT gameStatistics.tournamentId) AS numberOfTournaments,
    0 AS goldMedals,
    0 AS silverMedals,
    0 AS bronzeMedals,
    COUNT(gameStatistics.id) AS gamesPlayed,
    (SELECT COUNT(DISTINCT schedule.id) FROM schedule WHERE
        playerIdLeftOne = playerTable.id OR playerIdLeftTwo = playerTable.id OR
        playerIdRightOne = playerTable.id OR playerIdRightTwo = playerTable.id
    ) AS gamesScheduled
FROM
    playerTable
LEFT JOIN
    gameStatistics
ON
    gameStatistics.playerIdLeftOne = playerTable.id OR
    gameStatistics.playerIdLeftTwo = playerTable.id OR
    gameStatistics.playerIdRightOne = playerTable.id OR
    gameStatistics.playerIdRightTwo = playerTable.id
WHERE
    playerTable.id = :id
GROUP BY
    playerTable.id;

clubs:
SELECT
    DISTINCT club
FROM
    playerTable
WHERE
    club LIKE '%' || :clubFilter || '%';

add:
INSERT INTO
    playerTable(name, birthYear, club)
VALUES
    (:name, :birthYear, :club);

update:
UPDATE
    playerTable
SET
    name = :name,
    birthYear = :birthYear,
    club = :club
WHERE
    id = :id;

delete:
DELETE FROM
    playerTable
WHERE
    id = :id;