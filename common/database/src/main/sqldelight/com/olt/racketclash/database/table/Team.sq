import kotlin.Int;

CREATE TABLE IF NOT EXISTS teamTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    rank INTEGER AS Int NOT NULL,
    tournamentId INTEGER NOT NULL,
    FOREIGN KEY (tournamentId) REFERENCES tournament (id)
);

filteredAndOrderedTeam:
WITH filteredAndOrdered AS (
    SELECT
        teamTable.*,
        (SELECT COUNT(*) FROM playerToTeam WHERE teamTable.id = playerToTeam.teamId) AS size,
        IIF(teamStatisticsSingle.singlesWon IS NULL, 0, teamStatisticsSingle.singlesWon) +
        IIF(teamStatisticsDouble.doublesWon IS NULL, 0, teamStatisticsDouble.doublesWon) AS gamesWon,
        IIF(teamStatisticsSingle.singlesDraw IS NULL, 0, teamStatisticsSingle.singlesDraw) +
        IIF(teamStatisticsDouble.doublesDraw IS NULL, 0, teamStatisticsDouble.doublesDraw) AS gamesDraw,
        IIF(teamStatisticsSingle.singlesLost IS NULL, 0, teamStatisticsSingle.singlesLost) +
        IIF(teamStatisticsDouble.doublesLost IS NULL, 0, teamStatisticsDouble.doublesLost) AS gamesLost,
        IIF(teamStatisticsSingle.singleGamePointsWon IS NULL, 0, teamStatisticsSingle.singleGamePointsWon) +
        IIF(teamStatisticsDouble.doubleGamePointsWon IS NULL, 0, teamStatisticsDouble.doubleGamePointsWon) +
        IIF(teamStatisticsRest.restGamePointsWon IS NULL, 0, teamStatisticsRest.restGamePointsWon) AS gamePointsWon,
        IIF(teamStatisticsSingle.singleGamePointsLost IS NULL, 0, teamStatisticsSingle.singleGamePointsLost) +
        IIF(teamStatisticsDouble.doubleGamePointsLost IS NULL, 0, teamStatisticsDouble.doubleGamePointsLost) AS gamePointsLost
    FROM
        teamTable
    LEFT JOIN
        teamStatisticsSingle ON teamStatisticsSingle.id = teamTable.id
    LEFT JOIN
        teamStatisticsDouble ON teamStatisticsDouble.id = teamTable.id
    LEFT JOIN
        teamStatisticsRest ON teamStatisticsRest.id = teamTable.id
    WHERE
        tournamentId = :tournamentId AND
        name LIKE '%' || :nameFilter || '%'
)
SELECT
    *
FROM
    filteredAndOrdered
ORDER BY
    CASE :sorting
        WHEN 'nameAsc' THEN name
        WHEN 'rankAsc' THEN rank
        WHEN 'sizeAsc' THEN size
        WHEN 'pointsAsc' THEN gamePointsWon
    END ASC,
    CASE :sorting
        WHEN 'pointsAsc' THEN gamePointsLost
    END DESC,
    CASE :sorting
        WHEN 'nameDesc' THEN name
        WHEN 'rankDesc' THEN rank
        WHEN 'sizeDesc' THEN size
        WHEN 'pointsDesc' THEN gamePointsWon
    END DESC,
    CASE :sorting
        WHEN 'pointsDesc' THEN gamePointsLost
    END ASC
LIMIT :limit OFFSET :offset;

selectFilteredAndOrderedSize:
SELECT
    COUNT(*) AS size
FROM
    teamTable
WHERE
    tournamentId = :tournamentId AND
    name LIKE '%' || :nameFilter || '%';

team:
SELECT
    teamTable.*,
    (SELECT COUNT(*) FROM playerToTeam WHERE teamTable.id = playerToTeam.teamId) AS size,
    IIF(teamStatisticsSingle.singlesWon IS NULL, 0, teamStatisticsSingle.singlesWon) +
    IIF(teamStatisticsDouble.doublesWon IS NULL, 0, teamStatisticsDouble.doublesWon) AS gamesWon,
    IIF(teamStatisticsSingle.singlesDraw IS NULL, 0, teamStatisticsSingle.singlesDraw) +
    IIF(teamStatisticsDouble.doublesDraw IS NULL, 0, teamStatisticsDouble.doublesDraw) AS gamesDraw,
    IIF(teamStatisticsSingle.singlesLost IS NULL, 0, teamStatisticsSingle.singlesLost) +
    IIF(teamStatisticsDouble.doublesLost IS NULL, 0, teamStatisticsDouble.doublesLost) AS gamesLost,
    IIF(teamStatisticsSingle.singleGamePointsWon IS NULL, 0, teamStatisticsSingle.singleGamePointsWon) +
    IIF(teamStatisticsDouble.doubleGamePointsWon IS NULL, 0, teamStatisticsDouble.doubleGamePointsWon) +
    IIF(teamStatisticsRest.restGamePointsWon IS NULL, 0, teamStatisticsRest.restGamePointsWon) AS gamePointsWon,
    IIF(teamStatisticsSingle.singleGamePointsLost IS NULL, 0, teamStatisticsSingle.singleGamePointsLost) +
    IIF(teamStatisticsDouble.doubleGamePointsLost IS NULL, 0, teamStatisticsDouble.doubleGamePointsLost) AS gamePointsLost
FROM
    teamTable
LEFT JOIN
    teamStatisticsSingle ON teamStatisticsSingle.id = teamTable.id
LEFT JOIN
    teamStatisticsDouble ON teamStatisticsDouble.id = teamTable.id
LEFT JOIN
    teamStatisticsRest ON teamStatisticsRest.id = teamTable.id
WHERE
    teamTable.id = :id;

add:
INSERT INTO
    teamTable(name, rank, tournamentId)
VALUES
    (:name, :rank, :tournamentId);

update:
UPDATE
    teamTable
SET
    name = :name,
    rank = :rank
WHERE
    id = :id;

delete:
DELETE FROM
    teamTable
WHERE
    id = :id;

lastInsertedId:
SELECT
    last_insert_rowid()
FROM
    teamTable;