import kotlin.Int;

CREATE TABLE IF NOT EXISTS teamTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    strength INTEGER AS Int NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_teamTable_strength ON teamTable (strength);

selectAll:
SELECT
    teamTable.id,
    name,
    strength,
    byes,
    size,
    COUNT(DISTINCT IIF(isDone, NULL, games.id)) AS openGames,
    COUNT(DISTINCT IIF(isDone, games.id, NULL)) AS played,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsLeftWon > setsRightWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsRightWon > setsLeftWon, 0)) AS wonGames,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsRightWon > setsLeftWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsLeftWon > setsRightWon, 0)) AS lostGames,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsLeftWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsRightWon, 0)) AS wonSets,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsRightWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsLeftWon, 0)) AS lostSets,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), pointsLeft, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), pointsRight, 0)) AS wonPoints,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), pointsRight, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), pointsLeft, 0)) AS lostPoints
FROM (
    SELECT
        teamTable.id,
        teamTable.name,
        strength,
        COUNT(DISTINCT byeTable.id) AS byes,
        COUNT(DISTINCT playerTable.id) AS size
    FROM
        teamTable
    LEFT JOIN
        playerTable ON playerTable.teamId = teamTable.id
    LEFT JOIN
        byeTable ON byeTable.playerId = playerTable.id
    GROUP BY
        teamTable.id
) AS teamTable
LEFT JOIN (
    SELECT
        gameTable.id,
        isDone,
        p1L.teamId AS playerLeft1TeamId, p2L.teamId AS playerLeft2TeamId,
        p1R.teamId AS playerRight1TeamId, p2R.teamId AS playerRight2TeamId,
        pointsLeft, pointsRight,
        setsLeftWon, setsRightWon
    FROM
        gameTable
    LEFT JOIN
        playerTable AS p1L ON p1L.id = playerLeft1Id
    LEFT JOIN
        playerTable AS p2L ON p2L.id = playerLeft2Id
    LEFT JOIN
        playerTable AS p1R ON p1R.id = playerRight1Id
    LEFT JOIN
        playerTable AS p2R ON p2R.id = playerRight2Id
) AS games ON playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id OR playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id
GROUP BY
    teamTable.id;

select:
SELECT
    teamTable.id,
    name,
    strength,
    byes,
    size,
    COUNT(DISTINCT IIF(isDone, NULL, games.id)) AS openGames,
    COUNT(DISTINCT IIF(isDone, games.id, NULL)) AS played,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsLeftWon > setsRightWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsRightWon > setsLeftWon, 0)) AS wonGames,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsRightWon > setsLeftWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsLeftWon > setsRightWon, 0)) AS lostGames,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsLeftWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsRightWon, 0)) AS wonSets,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), setsRightWon, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), setsLeftWon, 0)) AS lostSets,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), pointsLeft, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), pointsRight, 0)) AS wonPoints,
    SUM(IIF(isDone AND (playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id), pointsRight, 0)) +
    SUM(IIF(isDone AND (playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id), pointsLeft, 0)) AS lostPoints
FROM (
    SELECT
        teamTable.id,
        teamTable.name,
        strength,
        COUNT(DISTINCT byeTable.id) AS byes,
        COUNT(DISTINCT playerTable.id) AS size
    FROM
        teamTable
    LEFT JOIN
        playerTable ON playerTable.teamId = teamTable.id
    LEFT JOIN
        byeTable ON byeTable.playerId = playerTable.id
    GROUP BY
        teamTable.id
) AS teamTable
LEFT JOIN (
    SELECT
        gameTable.id,
        isDone,
        p1L.teamId AS playerLeft1TeamId, p2L.teamId AS playerLeft2TeamId,
        p1R.teamId AS playerRight1TeamId, p2R.teamId AS playerRight2TeamId,
        pointsLeft, pointsRight,
        setsLeftWon, setsRightWon
    FROM
        gameTable
    LEFT JOIN
        playerTable AS p1L ON p1L.id = playerLeft1Id
    LEFT JOIN
        playerTable AS p2L ON p2L.id = playerLeft2Id
    LEFT JOIN
        playerTable AS p1R ON p1R.id = playerRight1Id
    LEFT JOIN
        playerTable AS p2R ON p2R.id = playerRight2Id
) AS games ON playerLeft1TeamId = teamTable.id OR playerLeft2TeamId = teamTable.id OR playerRight1TeamId = teamTable.id OR playerRight2TeamId = teamTable.id
WHERE
    teamTable.id = :id
GROUP BY
    teamTable.id;

add:
INSERT INTO
    teamTable(name, strength)
VALUES
    (:name, :strength);

update:
UPDATE
    teamTable
SET
    name = :name,
    strength = :strength
WHERE
    id = :id;

delete:
DELETE FROM
    teamTable
WHERE
    id = :id;

size:
SELECT
    COUNT(*)
FROM
    teamTable;