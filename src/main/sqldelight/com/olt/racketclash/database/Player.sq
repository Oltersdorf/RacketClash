import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS playerTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    active INTEGER AS Boolean NOT NULL DEFAULT FALSE,
    name TEXT NOT NULL,
    teamId INTEGER NOT NULL,
    lastPlayed INTEGER,
    projectId INTEGER NOT NULL,
    FOREIGN KEY (teamId) REFERENCES teamTable (id),
    FOREIGN KEY (projectId) REFERENCES projectTable (id)
);

CREATE INDEX IF NOT EXISTS idx_playerTable_teamId ON playerTable (teamId);

selectAll:
SELECT
    playerTable.id,
    active,
    playerTable.name,
    COUNT(DISTINCT IIF(isDone, NULL, gameTable.id)) AS openGames,
    COUNT(DISTINCT IIF(isDone, gameTable.id, NULL)) AS played,
    COUNT(DISTINCT byeTable.id) AS bye,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon, setsRightWon)) AS wonSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon, setsLeftWon)) AS lostSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon > setsRightWon, setsRightWon > setsLeftWon)) AS wonGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon > setsLeftWon, setsLeftWon > setsRightWon)) AS lostGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsLeft, pointsRight)) AS wonPoints,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsRight, pointsLeft)) AS lostPoints,
    teamId,
    teamTable.name AS teamName,
    teamTable.strength AS teamStrength
FROM
    teamTable
JOIN
    playerTable ON playerTable.teamId = teamTable.id
LEFT JOIN
    byeTable ON byeTable.playerId = playerTable.id
LEFT JOIN
    gameTable ON playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id OR playerRight1Id = playerTable.id OR playerRight2Id = playerTable.id
GROUP BY
    playerTable.id;

select:
SELECT
    playerTable.id,
    active,
    playerTable.name,
    COUNT(DISTINCT IIF(isDone, NULL, gameTable.id)) AS openGames,
    COUNT(DISTINCT IIF(isDone, gameTable.id, NULL)) AS played,
    COUNT(DISTINCT byeTable.id) AS bye,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon, setsRightWon)) AS wonSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon, setsLeftWon)) AS lostSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon > setsRightWon, setsRightWon > setsLeftWon)) AS wonGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon > setsLeftWon, setsLeftWon > setsRightWon)) AS lostGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsLeft, pointsRight)) AS wonPoints,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsRight, pointsLeft)) AS lostPoints,
    teamId,
    teamTable.name AS teamName,
    teamTable.strength AS teamStrength
FROM
    teamTable
JOIN
    playerTable ON playerTable.teamId = teamTable.id
LEFT JOIN
    byeTable ON byeTable.playerId = playerTable.id
LEFT JOIN
    gameTable ON playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id OR playerRight1Id = playerTable.id OR playerRight2Id = playerTable.id
WHERE
    playerTable.id = :id
GROUP BY
    playerTable.id;

selectActive:
SELECT
    playerTable.id,
    active,
    playerTable.name,
    COUNT(DISTINCT IIF(isDone, NULL, gameTable.id)) AS openGames,
    COUNT(DISTINCT IIF(isDone, gameTable.id, NULL)) AS played,
    COUNT(DISTINCT byeTable.id) AS bye,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon, setsRightWon)) AS wonSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon, setsLeftWon)) AS lostSets,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsLeftWon > setsRightWon, setsRightWon > setsLeftWon)) AS wonGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), setsRightWon > setsLeftWon, setsLeftWon > setsRightWon)) AS lostGames,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsLeft, pointsRight)) AS wonPoints,
    SUM(IIF(gameTable.isDone AND (playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id), pointsRight, pointsLeft)) AS lostPoints,
    teamId,
    teamTable.name AS teamName,
    teamTable.strength AS teamStrength
FROM
    teamTable
JOIN
    playerTable ON playerTable.teamId = teamTable.id
LEFT JOIN
    byeTable ON byeTable.playerId = playerTable.id
LEFT JOIN
    gameTable ON playerLeft1Id = playerTable.id OR playerLeft2Id = playerTable.id OR playerRight1Id = playerTable.id OR playerRight2Id = playerTable.id
WHERE
    active = TRUE
GROUP BY
    playerTable.id;

add:
INSERT INTO
    playerTable(name, teamId, projectId)
VALUES
    (:name, :teamId, :projectId);

update:
UPDATE
    playerTable
SET
    name = :name,
    teamId = :teamId
WHERE
    id = :id;

setLastPlayed:
UPDATE
    playerTable
SET
    lastPlayed = :lastPlayed
WHERE
    id = :id;

setActive:
UPDATE
    playerTable
SET
    active = :active
WHERE
    id = :id;

delete:
DELETE FROM
    playerTable
WHERE
    id = :id;